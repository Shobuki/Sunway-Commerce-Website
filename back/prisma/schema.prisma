generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id           Int            @id @default(autoincrement())
  username     String         @unique
  password     String
  token        String?
  image        String?
  name         String
  birthdate    DateTime?
  phonenumber  String?
  address      String?
  gender       String?
  roleId       Int
  Role         Role           @relation(fields: [roleId], references: [id])
  AdminSession AdminSession[]
  Chat         Chat[]
  ChatOrder    ChatOrder[]
  Message      Message[]
}

model AdminSession {
  id         Int       @id @default(autoincrement())
  adminId    Int
  loginTime  DateTime  @default(now())
  logoutTime DateTime?
  Admin      Admin     @relation(fields: [adminId], references: [id])
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  createdAt DateTime   @default(now())
  deletedAt DateTime?
  User      User       @relation(fields: [userId], references: [id])
  CartItem  CartItem[]
}

model CartItem {
  id        Int       @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  Cart      Cart      @relation(fields: [cartId], references: [id])
  Product   Product   @relation(fields: [productId], references: [id])
}

model Chat {
  id        Int       @id @default(autoincrement())
  userId    Int
  adminId   Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  Admin     Admin?    @relation(fields: [adminId], references: [id])
  User      User      @relation(fields: [userId], references: [id])
  Message   Message[]
}

model ChatOrder {
  id        Int       @id @default(autoincrement())
  orderId   Int
  userId    Int
  adminId   Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  Admin     Admin?    @relation(fields: [adminId], references: [id])
  Order     Order     @relation(fields: [orderId], references: [id])
  User      User      @relation(fields: [userId], references: [id])
  Message   Message[]
}

model Event {
  id          Int          @id @default(autoincrement())
  name        String
  dateStart   DateTime
  dateEnd     DateTime?
  createdAt   DateTime     @default(now())
  deletedAt   DateTime?
  description String?
  EventImage  EventImage[]
}

model EventImage {
  id        Int       @id @default(autoincrement())
  image     String
  eventId   Int
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  Event     Event     @relation(fields: [eventId], references: [id])
}

model MenuAccess {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  Role        Role[]
}

model Message {
  id          Int        @id @default(autoincrement())
  chatId      Int
  chatOrderId Int?
  message     String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime?
  userId      Int
  adminId     Int?
  Admin       Admin?     @relation(fields: [adminId], references: [id])
  Chat        Chat       @relation(fields: [chatId], references: [id])
  ChatOrder   ChatOrder? @relation(fields: [chatOrderId], references: [id])
  User        User       @relation(fields: [userId], references: [id])
}

model Order {
  id               Int         @id @default(autoincrement())
  userId           Int
  orderNumber      String
  totalPrice       Float
  createdAt        DateTime    @default(now())
  deletedAt        DateTime?
  transactionToken String      @unique
  status           String
  ChatOrder        ChatOrder[]
  User             User        @relation(fields: [userId], references: [id])
  OrderItem        OrderItem[]
}

model OrderItem {
  id        Int       @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  Order     Order     @relation(fields: [orderId], references: [id])
  Product   Product   @relation(fields: [productId], references: [id])
}

model Price {
  id                Int              @id @default(autoincrement())
  productId         Int?
  price             Float
  userId            Int?
  userCategoryId    Int?
  productCategoryId Int?
  createdAt         DateTime         @default(now())
  deletedAt         DateTime?
  ProductCategory   ProductCategory? @relation(fields: [productCategoryId], references: [id])
  Product           Product?         @relation(fields: [productId], references: [id])
  UserCategory      UserCategory?    @relation(fields: [userCategoryId], references: [id])
  User              User?            @relation(fields: [userId], references: [id])
}

model PriceHistory {
  id        Int      @id @default(autoincrement())
  productId Int
  price     Float
  updatedAt DateTime @default(now())
  Product   Product  @relation(fields: [productId], references: [id])
}

model Product {
  id              Int               @id @default(autoincrement())
  name            String
  description     String?
  createdAt       DateTime          @default(now())
  deletedAt       DateTime?
  stock           Int               @default(0)
  CartItem        CartItem[]
  OrderItem       OrderItem[]
  Price           Price[]
  PriceHistory    PriceHistory[]
  ProductImage    ProductImage[]
  StockHistory    StockHistory[]
  Promo           Promo[]           @relation("ProductPromos")
  ProductCategory ProductCategory[]
}

model ProductCategory {
  id                    Int               @id @default(autoincrement())
  name                  String
  createdAt             DateTime          @default(now())
  deletedAt             DateTime?
  parentCategoryId      Int?
  Price                 Price[]
  ProductCategory       ProductCategory?  @relation("ProductCategoryToProductCategory", fields: [parentCategoryId], references: [id])
  other_ProductCategory ProductCategory[] @relation("ProductCategoryToProductCategory")
  Product               Product[]
}

model ProductImage {
  id        Int       @id @default(autoincrement())
  image     String
  productId Int
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  Product   Product   @relation(fields: [productId], references: [id])
}

model Promo {
  id        Int       @id @default(autoincrement())
  code      String    @unique
  discount  Float
  startDate DateTime
  endDate   DateTime
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  Product   Product[] @relation("ProductPromos")
  User      User[]    @relation("UserPromos")
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  description String?
  Admin       Admin[]
  MenuAccess  MenuAccess[]
}

model StockHistory {
  id        Int      @id @default(autoincrement())
  productId Int
  stock     Int
  updatedAt DateTime @default(now())
  Product   Product  @relation(fields: [productId], references: [id])
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  name         String?
  password     String
  categoryId   Int?
  username     String        @unique
  createdAt    DateTime      @default(now())
  deletedAt    DateTime?
  token        String?
  image        String?
  address      String?
  birthdate    DateTime?
  country      String?
  gender       String?
  phonenumber  String?
  province     String?
  Cart         Cart?
  Chat         Chat[]
  ChatOrder    ChatOrder[]
  Message      Message[]
  Order        Order[]
  Price        Price[]
  UserCategory UserCategory? @relation(fields: [categoryId], references: [id])
  UserSession  UserSession[]
  Promo        Promo[]       @relation("UserPromos")
}

model UserCategory {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  Price     Price[]
  User      User[]
}

model UserSession {
  id         Int       @id @default(autoincrement())
  userId     Int
  loginTime  DateTime  @default(now())
  logoutTime DateTime?
  token      String?
  User       User      @relation(fields: [userId], references: [id])
}
